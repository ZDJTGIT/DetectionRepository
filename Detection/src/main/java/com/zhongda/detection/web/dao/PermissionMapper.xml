<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zhongda.detection.web.dao.PermissionMapper">
  <resultMap id="BaseResultMap" type="com.zhongda.detection.web.model.Permission">
    <id column="permission_id" jdbcType="INTEGER" property="permissionId" />
    <result column="permission_parent_id" jdbcType="INTEGER" property="permissionParentId" />
    <result column="permission_name" jdbcType="VARCHAR" property="permissionName" />
    <result column="permission_level" jdbcType="INTEGER" property="permissionLevel" />
    <result column="permission_sign" jdbcType="VARCHAR" property="permissionSign" />
    <result column="permission_description" jdbcType="VARCHAR" property="permissionDescription" />
  </resultMap>
  <resultMap id="LinkRoleResultMap" type="com.zhongda.detection.web.model.Permission">
    <id column="permission_id" jdbcType="INTEGER" property="permissionId" />
    <result column="permission_parent_id" jdbcType="INTEGER" property="permissionParentId" />
    <result column="permission_name" jdbcType="VARCHAR" property="permissionName" />
    <result column="permission_level" jdbcType="INTEGER" property="permissionLevel" />
    <result column="permission_sign" jdbcType="VARCHAR" property="permissionSign" />
    <result column="permission_description" jdbcType="VARCHAR" property="permissionDescription" />
    <result column="permission_parent_name" jdbcType="VARCHAR" property="permissionParentName" />
    <collection property="roleList" ofType="com.zhongda.detection.web.model.Role">
	    <id column="role_id" jdbcType="INTEGER" property="roleId" />
		<result column="role_name" jdbcType="VARCHAR" property="roleName" />
		<result column="role_sign" jdbcType="VARCHAR" property="roleSign" />
		<result column="role_description" jdbcType="VARCHAR" property="roleDescription" />
	 </collection>
  </resultMap>
  <sql id="Base_Column_List">
    permission_id, permission_parent_id, permission_name, permission_level, permission_sign, 
    permission_description
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from permission
    where permission_id = #{permissionId,jdbcType=INTEGER}
  </select>
  <select id="selectPermissionsByRoleId" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select
    p.*
    from permission p, role_permission rp
    where p.permission_id = rp.permission_id and rp.role_id = #{roleId,jdbcType=INTEGER}
  </select>
  <select id="selectAllPermissions" resultMap="BaseResultMap">
	select
	<include refid="Base_Column_List" />
	from permission
  </select>
  <select id="selectPermissionByPermissionName" parameterType="java.lang.String" resultMap="BaseResultMap">
	select
	<include refid="Base_Column_List" />
	from permission
	where permission_name = #{permissionName,jdbcType=VARCHAR}
  </select>
  <select id="selectPermissionByPermissionSign" parameterType="java.lang.String" resultMap="BaseResultMap">
	select
	<include refid="Base_Column_List" />
	from permission
	where permission_sign = #{permissionSign,jdbcType=VARCHAR}
  </select>
  <select id="selectPermissionAndRoleByPermissionId" parameterType="java.lang.Integer" resultMap="LinkRoleResultMap">
	select
	p.*, ( case p.permission_parent_id when 0 then 'æ— '  else p_t.permission_name end ) 'permission_parent_name',  r.*
	from (( permission p left join permission p_t on p.permission_parent_id = p_t.permission_id ) left join role_permission rp on p.permission_id = rp.permission_id ) left join role r on rp.role_id = r.role_id
	where p.permission_id = #{permissionId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from permission
    where permission_id = #{permissionId,jdbcType=INTEGER}
  </delete>
  <delete id="deletePermissionAndChildPermission" parameterType="java.lang.Integer">
    delete from permission
    where permission_id = #{permissionId,jdbcType=INTEGER} or permission_parent_id = #{permissionId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.zhongda.detection.web.model.Permission">
    insert into permission (permission_id, permission_parent_id, 
      permission_name, permission_level, permission_sign, 
      permission_description)
    values (#{permissionId,jdbcType=INTEGER}, #{permissionParentId,jdbcType=INTEGER}, 
      #{permissionName,jdbcType=VARCHAR}, #{permissionLevel,jdbcType=INTEGER}, #{permissionSign,jdbcType=VARCHAR}, 
      #{permissionDescription,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.zhongda.detection.web.model.Permission" useGeneratedKeys="true" keyProperty="permissionId">
    insert into permission
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="permissionId != null">
        permission_id,
      </if>
      <if test="permissionParentId != null">
        permission_parent_id,
      </if>
      <if test="permissionName != null">
        permission_name,
      </if>
      <if test="permissionLevel != null">
        permission_level,
      </if>
      <if test="permissionSign != null">
        permission_sign,
      </if>
      <if test="permissionDescription != null">
        permission_description,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="permissionId != null">
        #{permissionId,jdbcType=INTEGER},
      </if>
      <if test="permissionParentId != null">
        #{permissionParentId,jdbcType=INTEGER},
      </if>
      <if test="permissionName != null">
        #{permissionName,jdbcType=VARCHAR},
      </if>
      <if test="permissionLevel != null">
        #{permissionLevel,jdbcType=INTEGER},
      </if>
      <if test="permissionSign != null">
        #{permissionSign,jdbcType=VARCHAR},
      </if>
      <if test="permissionDescription != null">
        #{permissionDescription,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.zhongda.detection.web.model.Permission">
    update permission
    <set>
      <if test="permissionParentId != null">
        permission_parent_id = #{permissionParentId,jdbcType=INTEGER},
      </if>
      <if test="permissionName != null">
        permission_name = #{permissionName,jdbcType=VARCHAR},
      </if>
      <if test="permissionLevel != null">
        permission_level = #{permissionLevel,jdbcType=INTEGER},
      </if>
      <if test="permissionSign != null">
        permission_sign = #{permissionSign,jdbcType=VARCHAR},
      </if>
      <if test="permissionDescription != null">
        permission_description = #{permissionDescription,jdbcType=VARCHAR},
      </if>
    </set>
    where permission_id = #{permissionId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.zhongda.detection.web.model.Permission">
    update permission
    set permission_parent_id = #{permissionParentId,jdbcType=INTEGER},
      permission_name = #{permissionName,jdbcType=VARCHAR},
      permission_level = #{permissionLevel,jdbcType=INTEGER},
      permission_sign = #{permissionSign,jdbcType=VARCHAR},
      permission_description = #{permissionDescription,jdbcType=VARCHAR}
    where permission_id = #{permissionId,jdbcType=INTEGER}
  </update>
</mapper>